{{> generated}}

package {{struct:javaPackage}};

import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.concurrent.Immutable;
import javax.annotation.Nullable;
import com.facebook.hyperthrift.HyperThriftBase;
import com.facebook.hyperthrift.reflect.HyperThriftType;
{{#isUnion}}
import androidx.annotation.IntDef;
{{/isUnion}}

@Immutable
@HyperThriftType
public class {{struct:javaCapitalName}} extends HyperThriftBase {
  public static final String TYPE_NAME = "{{struct:javaPackage}}.{{struct:javaCapitalName}}";

{{#struct:union?}}
  @IntDef({
  {{#struct:fields}}
    Fields.{{field:javaName}},
  {{/struct:fields}}
  })
  public @interface Fields {
  {{#struct:fields}}
    int {{field:javaName}} = {{field:key}};
  {{/struct:fields}}
  }

  public @Fields int getUnionFieldId() {
    return getUnionFieldIdInternal();
  }

  public Object getUnionFieldValue() {
    return getFieldValue(getUnionFieldIndex());
  }
{{/struct:union?}}

{{#struct:fields}}
  {{^field:required?}}
  @Nullable
  {{/field:required?}}
  public {{> fieldtype}} {{field:name}}() {
    return getFieldValue({{field:index}});
  }

{{/struct:fields}}

{{#hasRedactedFields}}
  @Override
  protected boolean isRedactedField(int index) {
    switch(index) {
      {{#redactedFields}}
      case {{intValue}}:
      {{/redactedFields}}
        return true;
      default:
        return false;
    }
  }
{{/hasRedactedFields}}

{{#struct:shouldGenerateBuilder}}
  public static class Builder extends HyperThriftBase.Builder {
    public Builder() {
      super({{struct:numFields}});
    }

    public Builder({{struct:javaCapitalName}} other) {
      super(other);
    }

  {{#struct:fields}}
    @Nullable
    public {{> fieldtype}} {{field:name}}() {
      return getFieldValue({{field:index}});
    }

    public Builder {{struct:javaCapitalName}}({{#field:required?}}@Nullable{{/field:required?}} {{> fieldtype}} value) {
      setFieldValue({{field:index}}, value);
    {{#struct:union?}}
      mUnionFieldId = {{field:key}};
    {{/struct:union?}}
      return this;
    }

  {{/struct:fields}}
    public {{struct:javaCapitalName}} build() {
      Object[] fields = markBuilt();
  {{#struct:fields}}
    {{#type:isContainer?}}
      deepCopyField(fields, {{field:index}});
    {{/type:isContainer?}}
  {{/struct:fields}}
      {{struct:javaCapitalName}} instance = new {{struct:javaCapitalName}}();
      instance.init(TYPE_NAME, fields);
  {{#struct:fields}}
    {{#field:required?}}
      instance.assertRequired({{field:index}}, "{{field:name}}");
    {{/field:required?}}
  {{/struct:fields}}
  {{#struct:union?}}
      instance.assignUnionFieldId(mUnionFieldId);
  {{/struct:union?}}
      return instance;
    }
  }
{{/struct:shouldGenerateBuilder}}
}
