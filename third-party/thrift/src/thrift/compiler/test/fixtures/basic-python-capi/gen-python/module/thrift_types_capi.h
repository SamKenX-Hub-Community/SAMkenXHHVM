
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/basic-python-capi/src/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyDataItem>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyDataItem> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyDataItem>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyDataItem> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItem>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItem>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItem& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::TransitiveDoubler>
    : public BaseExtractor<::test::fixtures::basic-python-capi::TransitiveDoubler> {
  ExtractorResult<::test::fixtures::basic-python-capi::TransitiveDoubler> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::TransitiveDoubler>
    : public BaseConstructor<::test::fixtures::basic-python-capi::TransitiveDoubler> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::TransitiveDoubler& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::TransitiveDoubler>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::TransitiveDoubler>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::TransitiveDoubler& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::DoubledPair>
    : public BaseExtractor<::test::fixtures::basic-python-capi::DoubledPair> {
  ExtractorResult<::test::fixtures::basic-python-capi::DoubledPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::DoubledPair>
    : public BaseConstructor<::test::fixtures::basic-python-capi::DoubledPair> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::DoubledPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::DoubledPair>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::DoubledPair>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::DoubledPair& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::StringPair>
    : public BaseExtractor<::test::fixtures::basic-python-capi::StringPair> {
  ExtractorResult<::test::fixtures::basic-python-capi::StringPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::StringPair>
    : public BaseConstructor<::test::fixtures::basic-python-capi::StringPair> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::StringPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::StringPair>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::StringPair>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::StringPair& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::VapidStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::VapidStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::VapidStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::VapidStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::VapidStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::VapidStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::VapidStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::VapidStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::VapidStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::PrimitiveStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::PrimitiveStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::PrimitiveStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>> {
  ExtractorResult<::test::fixtures::basic-python-capi::PrimitiveStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::PrimitiveStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::PrimitiveStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::PrimitiveStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::PrimitiveStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::ListStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::ListStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::ListStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>> {
  ExtractorResult<::test::fixtures::basic-python-capi::ListStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::ListStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::ListStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::ListStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::ListStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::SetStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::SetStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::SetStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>> {
  ExtractorResult<::test::fixtures::basic-python-capi::SetStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::SetStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::SetStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::SetStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::SetStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MapStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MapStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::MapStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>> {
  ExtractorResult<::test::fixtures::basic-python-capi::MapStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::MapStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MapStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MapStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MapStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::ComposeStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::ComposeStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::ComposeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>> {
  ExtractorResult<::test::fixtures::basic-python-capi::ComposeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::ComposeStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::ComposeStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::ComposeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::ComposeStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::Shallot>
    : public BaseExtractor<::test::fixtures::basic-python-capi::Shallot> {
  ExtractorResult<::test::fixtures::basic-python-capi::Shallot> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>> {
  ExtractorResult<::test::fixtures::basic-python-capi::Shallot> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::Shallot>
    : public BaseConstructor<::test::fixtures::basic-python-capi::Shallot> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::Shallot& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::Shallot& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructPatch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructPatch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructPatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructPatch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructPatch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructPatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructPatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructPatch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructPatch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructField4Patch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructField4Patch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructField4Patch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructField4Patch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructField4Patch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField4Patch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField4Patch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField4Patch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField4Patch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructField6Patch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructField6Patch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructField6Patch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructField6Patch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructField6Patch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField6Patch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField6Patch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField6Patch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField6Patch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructField7Patch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructField7Patch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructField7Patch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructField7Patch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructField7Patch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField7Patch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField7Patch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField7Patch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField7Patch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructField8Patch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructField8Patch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructField8Patch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructField8Patch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructField8Patch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField8Patch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField8Patch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField8Patch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructField8Patch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructFieldPatch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructFieldPatch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructFieldPatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructFieldPatch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructFieldPatch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructFieldPatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructFieldPatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructFieldPatch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructFieldPatch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyStructEnsureStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyStructEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyStructEnsureStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyStructEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyDataItemPatch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyDataItemPatch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemPatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyDataItemPatch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyDataItemPatch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemPatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemPatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemPatch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemPatch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemFieldPatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemFieldPatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemFieldPatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemFieldPatch>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemFieldPatch& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};


template <>
struct Constructor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>
    : public BaseConstructor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::MyEnum>
    : public BaseExtractor<::test::fixtures::basic-python-capi::MyEnum> {
  ExtractorResult<::test::fixtures::basic-python-capi::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::MyEnum> {
  PyObject* operator()(::test::fixtures::basic-python-capi::MyEnum val);
};

template <>
struct Extractor<::test::fixtures::basic-python-capi::NormalDecentEnum>
    : public BaseExtractor<::test::fixtures::basic-python-capi::NormalDecentEnum> {
  ExtractorResult<::test::fixtures::basic-python-capi::NormalDecentEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::basic-python-capi::NormalDecentEnum> {
  PyObject* operator()(::test::fixtures::basic-python-capi::NormalDecentEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
