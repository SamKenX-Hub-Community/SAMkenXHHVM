/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package thrift.test;

import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.concurrent.Immutable;
import javax.annotation.Nullable;
import com.facebook.hyperthrift.HyperThriftBase;
import com.facebook.hyperthrift.reflect.HyperThriftType;

@Immutable
@HyperThriftType
public class VersioningTestV2 extends HyperThriftBase {
  public static final String TYPE_NAME = "thrift.test.VersioningTestV2";


  @Nullable
  public int begin_in_both() {
    return getFieldValue(0);
  }

  @Nullable
  public int newint() {
    return getFieldValue(1);
  }

  @Nullable
  public byte newbyte() {
    return getFieldValue(2);
  }

  @Nullable
  public short newshort() {
    return getFieldValue(3);
  }

  @Nullable
  public long newlong() {
    return getFieldValue(4);
  }

  @Nullable
  public double newdouble() {
    return getFieldValue(5);
  }

  @Nullable
  public thrift.test.Bonk newstruct() {
    return getFieldValue(6);
  }

  @Nullable
  public List<Integer> newlist() {
    return getFieldValue(7);
  }

  @Nullable
  public Set<Integer> newset() {
    return getFieldValue(8);
  }

  @Nullable
  public Map<Integer, Integer> newmap() {
    return getFieldValue(9);
  }

  @Nullable
  public String newstring() {
    return getFieldValue(10);
  }

  @Nullable
  public int end_in_both() {
    return getFieldValue(11);
  }



  public static class Builder extends HyperThriftBase.Builder {
    public Builder() {
      super(12);
    }

    public Builder(VersioningTestV2 other) {
      super(other);
    }

    @Nullable
    public int begin_in_both() {
      return getFieldValue(0);
    }

    public Builder VersioningTestV2( int value) {
      setFieldValue(0, value);
      return this;
    }

    @Nullable
    public int newint() {
      return getFieldValue(1);
    }

    public Builder VersioningTestV2( int value) {
      setFieldValue(1, value);
      return this;
    }

    @Nullable
    public byte newbyte() {
      return getFieldValue(2);
    }

    public Builder VersioningTestV2( byte value) {
      setFieldValue(2, value);
      return this;
    }

    @Nullable
    public short newshort() {
      return getFieldValue(3);
    }

    public Builder VersioningTestV2( short value) {
      setFieldValue(3, value);
      return this;
    }

    @Nullable
    public long newlong() {
      return getFieldValue(4);
    }

    public Builder VersioningTestV2( long value) {
      setFieldValue(4, value);
      return this;
    }

    @Nullable
    public double newdouble() {
      return getFieldValue(5);
    }

    public Builder VersioningTestV2( double value) {
      setFieldValue(5, value);
      return this;
    }

    @Nullable
    public thrift.test.Bonk newstruct() {
      return getFieldValue(6);
    }

    public Builder VersioningTestV2( thrift.test.Bonk value) {
      setFieldValue(6, value);
      return this;
    }

    @Nullable
    public List<Integer> newlist() {
      return getFieldValue(7);
    }

    public Builder VersioningTestV2( List<Integer> value) {
      setFieldValue(7, value);
      return this;
    }

    @Nullable
    public Set<Integer> newset() {
      return getFieldValue(8);
    }

    public Builder VersioningTestV2( Set<Integer> value) {
      setFieldValue(8, value);
      return this;
    }

    @Nullable
    public Map<Integer, Integer> newmap() {
      return getFieldValue(9);
    }

    public Builder VersioningTestV2( Map<Integer, Integer> value) {
      setFieldValue(9, value);
      return this;
    }

    @Nullable
    public String newstring() {
      return getFieldValue(10);
    }

    public Builder VersioningTestV2( String value) {
      setFieldValue(10, value);
      return this;
    }

    @Nullable
    public int end_in_both() {
      return getFieldValue(11);
    }

    public Builder VersioningTestV2( int value) {
      setFieldValue(11, value);
      return this;
    }

    public VersioningTestV2 build() {
      Object[] fields = markBuilt();
      VersioningTestV2 instance = new VersioningTestV2();
      instance.init(TYPE_NAME, fields);
      return instance;
    }
  }
}
