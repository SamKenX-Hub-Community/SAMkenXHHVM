// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

type FooBarBazService interface {
  FooStructured() (err error)
  BarNonStructured() (err error)
  Baz() (err error)
}

type FooBarBazServiceClientInterface interface {
  thrift.ClientInterface
  FooStructured() (err error)
  BarNonStructured() (err error)
  Baz() (err error)
}

type FooBarBazServiceClient struct {
  FooBarBazServiceClientInterface
  CC thrift.ClientConn
}

func(client *FooBarBazServiceClient) Open() error {
  return client.CC.Open()
}

func(client *FooBarBazServiceClient) Close() error {
  return client.CC.Close()
}

func(client *FooBarBazServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewFooBarBazServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FooBarBazServiceClient {
  return &FooBarBazServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewFooBarBazServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooBarBazServiceClient {
  return &FooBarBazServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewFooBarBazServiceClientProtocol(prot thrift.Protocol) *FooBarBazServiceClient {
  return NewFooBarBazServiceClient(prot.Transport(), prot, prot)
}

func (p *FooBarBazServiceClient) FooStructured() (err error) {
  var args FooBarBazServiceFooArgs
  err = p.CC.SendMsg("foo", &args, thrift.CALL)
  if err != nil { return }
  return p.recvFoo()
}


func (p *FooBarBazServiceClient) recvFoo() (err error) {
  var __result FooBarBazServiceFooResult
  return p.CC.RecvMsg("foo", &__result)
}

func (p *FooBarBazServiceClient) BarNonStructured() (err error) {
  var args FooBarBazServiceBarArgs
  err = p.CC.SendMsg("bar", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBar()
}


func (p *FooBarBazServiceClient) recvBar() (err error) {
  var __result FooBarBazServiceBarResult
  return p.CC.RecvMsg("bar", &__result)
}

func (p *FooBarBazServiceClient) Baz() (err error) {
  var args FooBarBazServiceBazArgs
  err = p.CC.SendMsg("baz", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBaz()
}


func (p *FooBarBazServiceClient) recvBaz() (err error) {
  var __result FooBarBazServiceBazResult
  return p.CC.RecvMsg("baz", &__result)
}


type FooBarBazServiceThreadsafeClient struct {
  FooBarBazServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *FooBarBazServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *FooBarBazServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *FooBarBazServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewFooBarBazServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *FooBarBazServiceThreadsafeClient {
  return &FooBarBazServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewFooBarBazServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *FooBarBazServiceThreadsafeClient {
  return &FooBarBazServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewFooBarBazServiceThreadsafeClientProtocol(prot thrift.Protocol) *FooBarBazServiceThreadsafeClient {
  return NewFooBarBazServiceThreadsafeClient(prot.Transport(), prot, prot)
}

func (p *FooBarBazServiceThreadsafeClient) FooStructured() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args FooBarBazServiceFooArgs
  err = p.CC.SendMsg("foo", &args, thrift.CALL)
  if err != nil { return }
  return p.recvFoo()
}


func (p *FooBarBazServiceThreadsafeClient) recvFoo() (err error) {
  var __result FooBarBazServiceFooResult
  return p.CC.RecvMsg("foo", &__result)
}

func (p *FooBarBazServiceThreadsafeClient) BarNonStructured() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args FooBarBazServiceBarArgs
  err = p.CC.SendMsg("bar", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBar()
}


func (p *FooBarBazServiceThreadsafeClient) recvBar() (err error) {
  var __result FooBarBazServiceBarResult
  return p.CC.RecvMsg("bar", &__result)
}

func (p *FooBarBazServiceThreadsafeClient) Baz() (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args FooBarBazServiceBazArgs
  err = p.CC.SendMsg("baz", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBaz()
}


func (p *FooBarBazServiceThreadsafeClient) recvBaz() (err error) {
  var __result FooBarBazServiceBazResult
  return p.CC.RecvMsg("baz", &__result)
}


type FooBarBazServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *FooBarBazServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *FooBarBazServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *FooBarBazServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewFooBarBazServiceChannelClient(channel thrift.RequestChannel) *FooBarBazServiceChannelClient {
  return &FooBarBazServiceChannelClient{RequestChannel: channel}
}

func (p *FooBarBazServiceChannelClient) FooStructured(ctx context.Context) (err error) {
  args := FooBarBazServiceFooArgs{
  }
  var __result FooBarBazServiceFooResult
  err = p.RequestChannel.Call(ctx, "foo", &args, &__result)
  if err != nil { return }

  return nil
}

func (p *FooBarBazServiceChannelClient) BarNonStructured(ctx context.Context) (err error) {
  args := FooBarBazServiceBarArgs{
  }
  var __result FooBarBazServiceBarResult
  err = p.RequestChannel.Call(ctx, "bar", &args, &__result)
  if err != nil { return }

  return nil
}

func (p *FooBarBazServiceChannelClient) Baz(ctx context.Context) (err error) {
  args := FooBarBazServiceBazArgs{
  }
  var __result FooBarBazServiceBazResult
  err = p.RequestChannel.Call(ctx, "baz", &args, &__result)
  if err != nil { return }

  return nil
}


type FooBarBazServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler FooBarBazService
}

func (p *FooBarBazServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FooBarBazServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *FooBarBazServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *FooBarBazServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *FooBarBazServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewFooBarBazServiceProcessor(handler FooBarBazService) *FooBarBazServiceProcessor {
  self8 := &FooBarBazServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self8.processorMap["foo"] = &fooBarBazServiceProcessorFoo{handler:handler}
  self8.processorMap["bar"] = &fooBarBazServiceProcessorBar{handler:handler}
  self8.processorMap["baz"] = &fooBarBazServiceProcessorBaz{handler:handler}
  self8.functionServiceMap["foo"] = "FooBarBazService"
  self8.functionServiceMap["bar"] = "FooBarBazService"
  self8.functionServiceMap["baz"] = "FooBarBazService"
  return self8
}

type fooBarBazServiceProcessorFoo struct {
  handler FooBarBazService
}

func (p *FooBarBazServiceFooResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *fooBarBazServiceProcessorFoo) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FooBarBazServiceFooArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fooBarBazServiceProcessorFoo) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("foo", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fooBarBazServiceProcessorFoo) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result FooBarBazServiceFooResult
  if err := p.handler.FooStructured(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing foo: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type fooBarBazServiceProcessorBar struct {
  handler FooBarBazService
}

func (p *FooBarBazServiceBarResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *fooBarBazServiceProcessorBar) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FooBarBazServiceBarArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fooBarBazServiceProcessorBar) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("bar", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fooBarBazServiceProcessorBar) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result FooBarBazServiceBarResult
  if err := p.handler.BarNonStructured(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing bar: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}

type fooBarBazServiceProcessorBaz struct {
  handler FooBarBazService
}

func (p *FooBarBazServiceBazResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *fooBarBazServiceProcessorBaz) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := FooBarBazServiceBazArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *fooBarBazServiceProcessorBaz) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("baz", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *fooBarBazServiceProcessorBaz) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result FooBarBazServiceBazResult
  if err := p.handler.Baz(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing baz: " + err.Error(), err)
      return x, x
    }
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

type FooBarBazServiceFooArgs struct {
  thrift.IRequest
}

func NewFooBarBazServiceFooArgs() *FooBarBazServiceFooArgs {
  return &FooBarBazServiceFooArgs{}
}

type FooBarBazServiceFooArgsBuilder struct {
  obj *FooBarBazServiceFooArgs
}

func NewFooBarBazServiceFooArgsBuilder() *FooBarBazServiceFooArgsBuilder{
  return &FooBarBazServiceFooArgsBuilder{
    obj: NewFooBarBazServiceFooArgs(),
  }
}

func (p FooBarBazServiceFooArgsBuilder) Emit() *FooBarBazServiceFooArgs{
  return &FooBarBazServiceFooArgs{
  }
}

func (p *FooBarBazServiceFooArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceFooArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("foo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceFooArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceFooArgs({})")
}

type FooBarBazServiceFooResult struct {
  thrift.IResponse
}

func NewFooBarBazServiceFooResult() *FooBarBazServiceFooResult {
  return &FooBarBazServiceFooResult{}
}

type FooBarBazServiceFooResultBuilder struct {
  obj *FooBarBazServiceFooResult
}

func NewFooBarBazServiceFooResultBuilder() *FooBarBazServiceFooResultBuilder{
  return &FooBarBazServiceFooResultBuilder{
    obj: NewFooBarBazServiceFooResult(),
  }
}

func (p FooBarBazServiceFooResultBuilder) Emit() *FooBarBazServiceFooResult{
  return &FooBarBazServiceFooResult{
  }
}

func (p *FooBarBazServiceFooResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceFooResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("foo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceFooResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceFooResult({})")
}

type FooBarBazServiceBarArgs struct {
  thrift.IRequest
}

func NewFooBarBazServiceBarArgs() *FooBarBazServiceBarArgs {
  return &FooBarBazServiceBarArgs{}
}

type FooBarBazServiceBarArgsBuilder struct {
  obj *FooBarBazServiceBarArgs
}

func NewFooBarBazServiceBarArgsBuilder() *FooBarBazServiceBarArgsBuilder{
  return &FooBarBazServiceBarArgsBuilder{
    obj: NewFooBarBazServiceBarArgs(),
  }
}

func (p FooBarBazServiceBarArgsBuilder) Emit() *FooBarBazServiceBarArgs{
  return &FooBarBazServiceBarArgs{
  }
}

func (p *FooBarBazServiceBarArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceBarArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("bar_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceBarArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceBarArgs({})")
}

type FooBarBazServiceBarResult struct {
  thrift.IResponse
}

func NewFooBarBazServiceBarResult() *FooBarBazServiceBarResult {
  return &FooBarBazServiceBarResult{}
}

type FooBarBazServiceBarResultBuilder struct {
  obj *FooBarBazServiceBarResult
}

func NewFooBarBazServiceBarResultBuilder() *FooBarBazServiceBarResultBuilder{
  return &FooBarBazServiceBarResultBuilder{
    obj: NewFooBarBazServiceBarResult(),
  }
}

func (p FooBarBazServiceBarResultBuilder) Emit() *FooBarBazServiceBarResult{
  return &FooBarBazServiceBarResult{
  }
}

func (p *FooBarBazServiceBarResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceBarResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("bar_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceBarResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceBarResult({})")
}

type FooBarBazServiceBazArgs struct {
  thrift.IRequest
}

func NewFooBarBazServiceBazArgs() *FooBarBazServiceBazArgs {
  return &FooBarBazServiceBazArgs{}
}

type FooBarBazServiceBazArgsBuilder struct {
  obj *FooBarBazServiceBazArgs
}

func NewFooBarBazServiceBazArgsBuilder() *FooBarBazServiceBazArgsBuilder{
  return &FooBarBazServiceBazArgsBuilder{
    obj: NewFooBarBazServiceBazArgs(),
  }
}

func (p FooBarBazServiceBazArgsBuilder) Emit() *FooBarBazServiceBazArgs{
  return &FooBarBazServiceBazArgs{
  }
}

func (p *FooBarBazServiceBazArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceBazArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("baz_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceBazArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceBazArgs({})")
}

type FooBarBazServiceBazResult struct {
  thrift.IResponse
}

func NewFooBarBazServiceBazResult() *FooBarBazServiceBazResult {
  return &FooBarBazServiceBazResult{}
}

type FooBarBazServiceBazResultBuilder struct {
  obj *FooBarBazServiceBazResult
}

func NewFooBarBazServiceBazResultBuilder() *FooBarBazServiceBazResultBuilder{
  return &FooBarBazServiceBazResultBuilder{
    obj: NewFooBarBazServiceBazResult(),
  }
}

func (p FooBarBazServiceBazResultBuilder) Emit() *FooBarBazServiceBazResult{
  return &FooBarBazServiceBazResult{
  }
}

func (p *FooBarBazServiceBazResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FooBarBazServiceBazResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("baz_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FooBarBazServiceBazResult) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("FooBarBazServiceBazResult({})")
}


