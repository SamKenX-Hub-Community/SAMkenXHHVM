{
  "refid": "op_2Patch_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Patch.h",
  "includes": [
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/Thrift.h"
    },
    {
      "refid": "op_2detail_2Patch_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/detail/Patch.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Tag.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/gen-cpp2/patch_types.h"
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache",
      "text_html": "apache"
    },
    {
      "refid": "namespaceapache_1_1thrift",
      "text_html": "apache::thrift"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op",
      "text_html": "apache::thrift::op"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1_1detail",
      "text_html": "apache::thrift::op::detail"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/op/Patch.h"
  },
  "filepath": "file/thrift/lib/cpp2/op/Patch.h",
  "href": "/ref/cpp/thrift/lib/cpp2/op/Patch.h",
  "free_typedefs": [
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a6d92753b5deafb5021817662b0ca0db7",
      "prot": "public",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "decltype(<code>detail::patchType</code>(type::infer_tag&lt;T&gt;{}))",
      "definition_html": "using apache::thrift::op::patch_type = typedef decltype(detail::patchType(type::infer_tag&lt;T&gt;{}))",
      "argsstring_html": "",
      "name_html": "patch_type",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "82",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "82",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>The patch represenations for the base thrift types.</p><p>All patch types support the following methods:<ul>\n<li><p>empty() - Returns true iff the patch is a noop.</p></li><li><p>reset() - Makes the patch a noop.</p></li><li><p>apply(T&amp;&amp; value) - Applies the patch to the given value, in place.</p></li><li><p>merge(P&amp;&amp; next) - Merges the 'next' patch into this one, such that the result is equivalent to applying this and next in sequence.</p></li><li><p>assign(U&amp;&amp; value) - Updates the patch to assign the given value.</p></li><li><p>operator=(U&amp;&amp; value) - An alias for assign.</p></li><li><p><code>get()</code> - Returns the underlying Thrift representation for the patch.</p></li></ul>\n</p><p>For example:<ul>\n<li><p>int32_t value = 1;</p></li><li><p>I32Patch patch;</p></li><li><p>patch = 2; // Equivalent to calling patch.assign(2).</p></li><li><p>patch.apply(value); // Sets value to 2; </p></li></ul>\n</p>"
      }
    }
  ],
  "free_overloadgroups": []
}